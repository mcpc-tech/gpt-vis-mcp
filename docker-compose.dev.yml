version: "3.8"

services:
  # Development MCP Mode
  gpt-vis-mcp-dev:
    build:
      context: .
      dockerfile: Dockerfile.mcp
      target: development # If we add multi-stage builds later
    image: gpt-vis-mcp:mcp-dev
    container_name: gpt-vis-mcp-dev
    volumes:
      - .:/app
      - gpt-vis-charts-dev:/tmp/gpt-vis-charts
      - deno-cache:/deno-dir
    environment:
      - RENDERED_IMAGE_PATH=/tmp/gpt-vis-charts
      - DENO_DIR=/deno-dir
    profiles:
      - mcp-dev
    working_dir: /app
    command: deno run -A --watch server.ts mcp

  # Development HTTP Mode
  gpt-vis-http-dev:
    build:
      context: .
      dockerfile: Dockerfile.http
      target: development # If we add multi-stage builds later
    image: gpt-vis-mcp:http-dev
    container_name: gpt-vis-http-dev
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - gpt-vis-charts-dev:/tmp/gpt-vis-charts
      - deno-cache:/deno-dir
    environment:
      - MODE=http
      - PORT=3000
      - RENDERED_IMAGE_PATH=/tmp/gpt-vis-charts
      - DENO_DIR=/deno-dir
    profiles:
      - http-dev
    working_dir: /app
    command: deno run -A --watch server.ts http
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  # Development testing container
  test:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    image: gpt-vis-mcp:test
    container_name: gpt-vis-test
    volumes:
      - .:/app
      - deno-cache:/deno-dir
    environment:
      - DENO_DIR=/deno-dir
    profiles:
      - test
    working_dir: /app
    command: deno test --allow-all --watch

volumes:
  gpt-vis-charts-dev:
    driver: local
  deno-cache:
    driver: local
